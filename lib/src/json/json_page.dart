import 'dart:async';
import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:squadron/squadron.dart';

import 'model/person.dart';
import 'model/address.dart';
import 'json_service.dart';

class JsonPage extends StatefulWidget {
  const JsonPage({Key? key, this.tabBar}) : super(key: key);

  final TabBar? tabBar;

  @override
  State<JsonPage> createState() => _JsonPageState();
}

class _JsonPageState extends State<JsonPage> {
  _JsonPageState() {
    _worker.start();
  }

  String? __jsonStr;
  String get _jsonStr => (__jsonStr ??= jsonEncode(_santaClaus.toJson()));

  final _worker = JsonServiceWorker();
  Timer? _computing;

  @override
  void dispose() {
    _worker.stop();
    super.dispose();
  }

  static final _santaClaus = Person(
      id: 1234,
      lastName: 'Santa',
      firstName: 'Claus',
      jpgPhoto: base64Decode(_b64))
    ..addresses.add(Address(
      id: 5678,
      line1: 'TÃ¤htikuja 1',
      zip: '96930',
      city: 'Arctic Circle',
      country: 'FINLAND',
    ));

  String _result = '';
  Widget? _photo;

  void _refresh() {
    setState(() {});
  }

  Future _begin() {
    _refresh();
    _computing?.cancel();
    _computing = Timer.periodic(const Duration(milliseconds: 100), (timer) {
      _refresh();
    });
    return Future.delayed(const Duration(milliseconds: 500));
  }

  Future _finish() async {
    await Future.delayed(const Duration(milliseconds: 500));
    _computing?.cancel();
    _computing = null;
    _refresh();
  }

  void _showResult(Person person, int millis) {
    _photo = (person.jpgPhoto == null)
        ? null
        : Expanded(child: Image.memory(person.jpgPhoto!));
    _result = '''
done in $millis ms

${person.lastName.toUpperCase()} ${person.firstName}
${person.addresses.take(1).map((a) => '''${a.line1}${a.line2 != null ? '\n${a.line2}' : ''}
${a.zip} ${a.city}
${a.country.toUpperCase()}''').join()}

''';
  }

  Future _execWithDecode() async {
    _result = '';
    await _begin();
    final sw = Stopwatch()..start();
    Squadron.info('[${sw.elapsedMilliseconds} ms] Loading JSON...');
    final jsonMap = await _worker.decode(_jsonStr);
    Squadron.info('[${sw.elapsedMilliseconds} ms] Loaded JSON');
    Squadron.info('[${sw.elapsedMilliseconds} ms] Converting to person...');
    final person = Person.fromJson(jsonMap);
    Squadron.info('[${sw.elapsedMilliseconds} ms] Converted');
    _finish();
    setState(() {
      _showResult(person, sw.elapsedMilliseconds);
    });
  }

  Future _execWithHydrate() async {
    _result = '';
    await _begin();
    final sw = Stopwatch()..start();
    Squadron.info('[${sw.elapsedMilliseconds} ms] Hydrating...');
    final person = await _worker.hydrate(_jsonStr);
    Squadron.info(
        '[${sw.elapsedMilliseconds} ms] Hydrated in ${sw.elapsedMilliseconds} ms');
    _finish();
    setState(() {
      _showResult(person, sw.elapsedMilliseconds);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('SQUADRON SAMPLE - JSON'),
        bottom: widget.tabBar,
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              _result.isEmpty ? '<no result yet>' : _result,
            ),
            if (_photo != null) _photo!,
          ],
        ),
      ),
      floatingActionButton: (_computing != null)
          ? Row(mainAxisAlignment: MainAxisAlignment.end, children: [
              Text('tick = ${_computing?.tick}',
                  style: const TextStyle(
                      backgroundColor: Colors.blue, color: Colors.white)),
            ])
          : Row(mainAxisAlignment: MainAxisAlignment.end, children: [
              FloatingActionButton(
                onPressed: _execWithDecode,
                tooltip: 'Decode',
                child: const Text('Decode', textAlign: TextAlign.center),
              ),
              FloatingActionButton(
                onPressed: _execWithHydrate,
                tooltip: 'Hydrate',
                child: const Text('Hydrate', textAlign: TextAlign.center),
              )
            ]),
    );
  }
}

const _b64 =
    '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';
